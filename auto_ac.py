import time
import random
import datetime
import tkinter as tk
from DHT22 import DHT22
from pnhLCD1602 import LCD1602

# Kh·ªüi t·∫°o c·∫£m bi·∫øn v√† m√†n h√¨nh LCD
sensor = DHT22(pin=4)
lcd = LCD1602()

# Bi·∫øn ƒëi·ªÅu khi·ªÉn
auto_mode = False
aircon_on = False
humidifier_on = False
set_temp = 25
set_humidity = 50
schedule_time = None
duration_hours = None 
duration_start = None

def toggle_auto_mode():
    global auto_mode
    auto_mode = not auto_mode
    update_ui()

def toggle_aircon():
    global aircon_on
    aircon_on = not aircon_on
    update_ui()

def toggle_humidifier():
    global humidifier_on
    humidifier_on = not humidifier_on
    update_ui()

def set_temperature(temp):
    global set_temp
    set_temp = temp
    update_ui()

def set_humidity_level(humidity):
    global set_humidity
    set_humidity = humidity
    update_ui()

def set_schedule():
    global schedule_time
    schedule_time = schedule_entry.get()  #
    print(f"üïí ƒê√£ ƒë·∫∑t h·∫πn gi·ªù! ƒêi·ªÅu h√≤a s·∫Ω B·∫¨T v√†o {schedule_time} v√† ch·∫°y trong 2 ph√∫t.")
    update_ui()


def set_duration():
    global duration_hours, duration_start
    if aircon_on or humidifier_on:  
        try:
            duration_hours = int(duration_entry.get()) 
            duration_start = datetime.datetime.now()
            print(f"‚è≥ ƒê√£ ƒë·∫∑t th·ªùi gian ch·∫°y {duration_hours} ph√∫t. ƒêi·ªÅu h√≤a s·∫Ω t·ª± t·∫Øt sau {duration_hours} ph√∫t.")
            update_ui()
        except ValueError:
            print("‚ö†Ô∏è L·ªói: H√£y nh·∫≠p s·ªë ph√∫t h·ª£p l·ªá!")


def update_display(temp, humidity):
    lcd.clear()
    if aircon_on and humidifier_on:
        lcd.write_string(f"T:{set_temp}C Env:{temp:.1f}C")
        lcd.set_cursor(1, 0)
        lcd.write_string(f"H:{set_humidity}% Env:{humidity:.1f}%")
    elif aircon_on and not humidifier_on:
        lcd.set_cursor(0, 0)
        lcd.write_string(f"T:{set_temp}C Env:{temp:.1f}C")
        lcd.set_cursor(1, 0)
        lcd.write_string(f"H:OFF Env:{humidity:.1f}%")
    elif not aircon_on and humidifier_on :
        lcd.set_cursor(0, 0)
        lcd.write_string(f"T:OFF Env:{temp:.1f}C")
        lcd.set_cursor(1, 0)
        lcd.write_string(f"H:{set_humidity}% Env:{humidity:.1f}%")
    elif not aircon_on and not humidifier_on  :
        lcd.set_cursor(0, 0)
        lcd.write_string(f"T:OFF Env:{temp:.1f}C")
        lcd.set_cursor(1, 0)
        lcd.write_string(f"H:OFF Env:{humidity:.1f}%")

def control_aircon(temp):
    global aircon_on
    if auto_mode:
        if temp > 27 or temp < 18:
            aircon_on = True
        elif temp == set_temp:
            aircon_on = False
        update_ui()

def control_humidifier(humidity):
    global humidifier_on
    if auto_mode:
        if humidity < 40 or humidity > 60:
            humidifier_on = True
        elif humidity == set_humidity:
            humidifier_on = False
        update_ui()

schedule_activated = False 

def check_schedule():
    global aircon_on, humidifier_on, duration_start, schedule_activated
    now = datetime.datetime.now().strftime("%H:%M")

    if schedule_time and now == schedule_time and not aircon_on and not schedule_activated:
        aircon_on = True
        humidifier_on = True
        duration_start = datetime.datetime.now()
        schedule_activated = True  
        print(f"üïí H·∫πn gi·ªù k√≠ch ho·∫°t! ƒêi·ªÅu h√≤a v√† m√°y phun s∆∞∆°ng ƒë√£ B·∫¨T v√†o {now}. T·ª± ƒë·ªông t·∫Øt sau 2 ph√∫t.")
        update_ui()

    if duration_start:
        elapsed = (datetime.datetime.now() - duration_start).total_seconds() / 60
        if elapsed >= 2:  # Sau 2 ph√∫t th√¨ t·∫Øt (ti·ªán cho vi·ªác test)
            aircon_on = False
            humidifier_on = False
            duration_start = None
            schedule_activated = False 
            print(f"‚è≥ ƒê√£ h·∫øt 2 ph√∫t! ƒêi·ªÅu h√≤a v√† m√°y phun s∆∞∆°ng ƒë√£ T·∫ÆT.")
            update_ui()

def check_duration():
    global aircon_on, humidifier_on, duration_hours, duration_start
    if duration_hours and duration_start:
        elapsed = (datetime.datetime.now() - duration_start).total_seconds() / 60 
        if elapsed >= duration_hours:
            aircon_on = False
            humidifier_on = False
            duration_hours = None
            duration_start = None
            print(f"‚è≥ H·∫øt th·ªùi gian c√†i ƒë·∫∑t! ƒêi·ªÅu h√≤a v√† m√°y phun s∆∞∆°ng ƒë√£ T·∫ÆT.")
            update_ui()

def update_ui():
    auto_btn.config(text=f"Auto Mode: {'ON' if auto_mode else 'OFF'}")
    ac_btn.config(text=f"AC: {'ON' if aircon_on else 'OFF'}")
    humidifier_btn.config(text=f"Humidifier: {'ON' if humidifier_on else 'OFF'}")
    temp_label.config(text=f"Nhi·ªát ƒë·ªô c√†i ƒë·∫∑t: {set_temp}¬∞C")
    humidity_label.config(text=f"ƒê·ªô ·∫©m c√†i ƒë·∫∑t: {set_humidity}%")
    schedule_label.config(text=f"H·∫πn gi·ªù: {schedule_time if schedule_time else '---'}")
    duration_label.config(text=f"Ch·∫°y trong: {duration_hours if duration_hours else '---'} gi·ªù")

def main_loop():
    temp, humidity = random.uniform(15, 30), random.uniform(30, 70)
    update_display(temp, humidity)
    control_aircon(temp)
    control_humidifier(humidity)
    check_schedule()
    check_duration()
    root.after(1000, main_loop)

# Giao di·ªán Tkinter
root = tk.Tk()
root.title("ƒêi·ªÅu h√≤a th√¥ng minh")

# Auto Mode
auto_btn = tk.Button(root, text="Auto Mode: OFF", command=toggle_auto_mode)
auto_btn.pack()

# B·∫≠t/t·∫Øt ƒëi·ªÅu h√≤a
ac_btn = tk.Button(root, text="AC: OFF", command=toggle_aircon)
ac_btn.pack()

# B·∫≠t/t·∫Øt phun s∆∞∆°ng
humidifier_btn = tk.Button(root, text="Humidifier: OFF", command=toggle_humidifier)
humidifier_btn.pack()

temp_label = tk.Label(root, text=f"Nhi·ªát ƒë·ªô c√†i ƒë·∫∑t: {set_temp}¬∞C")
temp_label.pack()

# TƒÉng/Gi·∫£m nhi·ªát ƒë·ªô
temp_frame = tk.Frame(root)
temp_frame.pack()

temp_up = tk.Button(temp_frame, text="+", command=lambda: set_temperature(set_temp + 1))
temp_up.grid(row=0, column=0)

temp_down = tk.Button(temp_frame, text="-", command=lambda: set_temperature(set_temp - 1))
temp_down.grid(row=0, column=1)

humidity_label = tk.Label(root, text=f"ƒê·ªô ·∫©m c√†i ƒë·∫∑t: {set_humidity}%")
humidity_label.pack()

# TƒÉng/Gi·∫£m ƒë·ªô ·∫©m
humi_frame = tk.Frame(root)
humi_frame.pack()

humi_up = tk.Button(humi_frame, text="+", command=lambda: set_humidity_level(set_humidity + 5))
humi_up.grid(row=0, column=0)
humi_down = tk.Button(humi_frame, text="-", command=lambda: set_humidity_level(set_humidity - 5))
humi_down.grid(row=0, column=1)


# H·∫πn gi·ªù b·∫≠t/t·∫Øt
schedule_label = tk.Label(root, text="H·∫πn gi·ªù: ---")
schedule_label.pack()
schedule_entry = tk.Entry(root)
schedule_entry.pack()
schedule_btn = tk.Button(root, text="ƒê·∫∑t gi·ªù", command=set_schedule)
schedule_btn.pack()

# H·∫πn gi·ªù ch·∫°y X gi·ªù
duration_label = tk.Label(root, text="Ch·∫°y trong: --- gi·ªù")
duration_label.pack()
duration_entry = tk.Entry(root)
duration_entry.pack()
duration_btn = tk.Button(root, text="ƒê·∫∑t th·ªùi gian ch·∫°y", command=set_duration)
duration_btn.pack()

# Ch·∫°y ch∆∞∆°ng tr√¨nh
main_loop()
root.mainloop()
